y=Hitters$Salary
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train) # I see! this is how to subset!!!!
y.test=y[test] #
grid =10^ seq(10,-2, length =100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid) # no errr afer omitting missing data (see above)
# ridge
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
# lasso
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2) #100743
library(glmnet)
library(leaps)
# chap 6.6 Lab2: Ridge REgression and the Lasso
# Before proceeding ensure that the missing values have been remove from the data, as described in Sectin 6.5
# from 6.5 Lab1: Subset Selection Methods
# 6.5.1 Best Subset Selection
library(ISLR)
#fix(Hitters) # this opens X11()
names(Hitters)
dim(Hitters) # 322 20
sum(is.na(Hitters$Salary)) # 59
Hitters=na.omit(Hitters) # (MO) this is new to me (a function in stats package)
dim(Hitters) # 263 20
sum(is.na(Hitters)) #0
# The regsubsets() function (part of the leaps library) performs best subregsubsets() set selection by identifying the best model that contains a given number of predictors, where best is quantified using RSS. The syntax is the same as for lm(). The summary() command outputs the best set of variables for each model size.
library(leaps)
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
# An asterisk indicates that a given variable is included in the corresponding model. For instance, this output indicates that the best two-variable model contains only Hits and CRBI. By default, regsubsets() only reports results up to the best eight-variable model.
## see texts more detais for follow section
x=model.matrix(Salary~.,Hitters)[,-1] # model.matrix(Salary~.,Hitters)[,1] is (Intercept)
y=Hitters$Salary
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train) # I see! this is how to subset!!!!
y.test=y[test] #
grid =10^ seq(10,-2, length =100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid) # no errr afer omitting missing data (see above)
# ridge
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
# lasso
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2) #100743
out=glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)[1:20,]
lasso.coef
out
attributes(out)
glmnet
?glmnet
?randomForest
install.packages("ElemStatLearn")
HPDplot(model=naive, main="stress")
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
install.packages("primerTree")
library(primerTree)
?primer_search
primer_search("CATTTTTCGTATGGCTGCTTC","TGAGCCTTGTTCGAACTCATC")
wrky33-1_primers<-primer_search("CATTTTTCGTATGGCTGCTTC","TGAGCCTTGTTCGAACTCATC")
wrky33_1_primers<-primer_search("CATTTTTCGTATGGCTGCTTC","TGAGCCTTGTTCGAACTCATC")
wrky33_1_primers
getwd()
wrky33_1_primers<-primer_search("CATTTTTCGTATGGCTGCTTC","TGAGCCTTGTTCGAACTCATC",taxonomy="Arabidopsis thaliana")
primer_search
get_taxonomy("Arabidopsis")
get_taxonomy("3780")
fix(primer_search)
fix(blast_primer)
?blast_primer
blast_primer
plot(1:10,2:11)
1:10
2:11
plot(1:10,2:11)
getwd()
## R code 2.1
ways <- c( 0 , 3 , 8 , 9 , 0 )
ways/sum(ways)
## R code 2.2
dbinom( 6 , size=9 , prob=0.5 )
## R code 2.3
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
## R code 2.4
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
## R code 2.5
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
prior <- exp( -5*abs( p_grid - 0.5 ) )
## R code 2.6
library(rethinking)
globe.qa <- map(
alist(
w ~ dbinom(9,p) ,  # binomial likelihood
p ~ dunif(0,1)     # uniform prior
) ,
data=list(w=6) )
# display summary of quadratic approximation
precis( globe.qa )
globe.qa <- map(
alist(
w ~ dbinom(9,p) ,  # binomial likelihood
p ~ dunif(0,1)     # uniform prior
) ,
data=list(w=6) )
precis( globe.qa )
w
dbinom(9,p)
list(w=6)
# analytical calculation
w <- 6
n <- 9
curve( dbeta( x , w+1 , n-w+1 ) , from=0 , to=1 )
# quadratic approximation
curve( dnorm( x , 0.67 , 0.16 ) , lty=2 , add=TRUE )
?dbeta
(1 + 0.3)/(0 + 0.7)
(0.5 + 0.5*0.3)/(0*0.5 + 0.5*0.7)
0.5 + 0.5*0.3
0*0.5 + 0.5*0.7
(0*0.5 + 0.5*0.7)/(0.5*1 + 0.5*0.3)
0.5/(0.5*1 + 0.5*0.3)
0.5/(0.5 + 0.5*0.3)
(1 + 0.3)/2
0.5/(1 + 0.3)/2
0.5*0.7/(1 + 0.3)/2
0.5*0.7/(0.5 + 0.5*0.3)
0.5 + 0.5*0.3
0.5*0.7
0.5*0.7/(0.5 + 0.5*0.3)
0.35/0.85
0.3*0.5/0.85
0.15/0.85
0.3*0.5/(0.3*0.5 + 0.5)
Pr(Earth|Land)<-Pr(L|E)*Pr(E)/Pr(L) # from Bayes theorem
Pr.Earth|Land<-Pr(L|E)*Pr(E)/Pr(L) # from Bayes theorem
0.3*0.5/(0.3*0.5 + 0.5)
PrPV <- 0.95
PrPM <- 0.01
PrV <- 0.001
PrP <- PrPV*PrV + PrPM*(1-PrV)
PrP
## R code 3.2
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
## R code 3.3
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
samples
plot(samples)
hist(samples)
plot( samples )
## R code 3.5
library(rethinking)
dens( samples )
sum( posterior[ p_grid < 0.5 ] )
sum( samples < 0.5 ) / 1e4
summary(samples)
quantile( samples , 0.8 )
quantile( samples , c( 0.1 , 0.9 ) )
## R code 3.11
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep(1,1000)
likelihood <- dbinom( 3 , size=3 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
samples <- sample( p_grid , size=1e4 , replace=TRUE , prob=posterior )
quantile( samples , c( 0.25 , 0.25 ) )
?summary
## R code 3.11
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep(1,1000)
likelihood <- dbinom( 3 , size=3 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
samples <- sample( p_grid , size=1e4 , replace=TRUE , prob=posterior )
## R code 3.12
PI( samples , prob=0.5 )
## R code 3.13
HPDI( samples , prob=0.5 )
## R code 3.14
p_grid[ which.max(posterior) ]
## R code 3.15
chainmode( samples , adj=0.01 )
## R code 3.16
mean( samples )
median( samples )
## R code 3.17
sum( posterior*abs( 0.5 - p_grid ) )
## R code 3.18
loss <- sapply( p_grid , function(d) sum( posterior*abs( d - p_grid ) ) )
loss
head(p_grid)
loss
plot(loss)
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
prior
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(deseq2)
library(dgseq2)
library(DEseq2)
library(DESeq2)
ver()
v()
r()
r
r.ver()
ver()
plot(1:10,2:11)
x<-1:10
x<-1:10
y<-2:11
plot(x,y)
x
y
plot(x,y)
# Test#
x<-1:10#
y<-2:11#
x#
y#
plot(x,y)
setA.row3<-c("48C2","48F9","Col","48A7","48C7","48B2","48B8","48B4")
setA.row1<-c("47J6","Col","47J10","48F6","47J1","48A9","48G1","Col")
setA.row2<-c("47I9","47J4","48D6","Col","48E2","48C4","48D9","48D3")
setA.row3<-c("48C2","48F9","Col","48A7","48C7","48B2","48B8","48B4")
###
setB.row1<-sample(setA.row3,8)
setB.row2<-sample(setA.row1,8)
setB.row3<-sample(setA.row2,8)
setB.row1<-sample(setA.row3,8)
set.seed(1)
# I forgot to set.seed and sprinkled seeds. (042516)
setA.row1<-c("47J6","Col","47J10","48F6","47J1","48A9","48G1","Col")
setA.row2<-c("47I9","47J4","48D6","Col","48E2","48C4","48D9","48D3")
setA.row3<-c("48C2","48F9","Col","48A7","48C7","48B2","48B8","48B4")
###
setB.row1<-sample(setA.row3,8)
setB.row2<-sample(setA.row1,8)
setB.row3<-sample(setA.row2,8)
setB.row1
sample(setA.row3,8)
sample(setA.row3,8)
sample(setA.row3,8)
sample(setA.row3,8)
sample(setA.row3,8)
ls()
rm(list=ls())
### R/FR function
R_FR_ratio<-function(spec,resolution){ #1st column is wavelength(nm), 2nd column is fluence rate (micro E) measured by Black Comet
#print(as.character(spec))
R<-sum(as.numeric(as.vector(spec[as.vector(spec[,1])>=655&as.vector(spec[,1])<=665,2])))* resolution;#print(paste("R=",R))
FR<-sum(as.numeric(as.vector(spec[as.vector(spec[,1])>=725&as.vector(spec[,1])<=735,2])))* resolution;#print(paste("FR=",FR))
#print(paste("R/FR=",R/FR))
return(R/FR)
}
#PAR function
PAR<-function(spec, resolution){
PAR.microE<-sum(as.numeric(as.vector(spec[as.vector(spec[,1])>=400&as.vector(spec[,1])<=700,2])))* resolution
return(PAR.microE)
}
## 050316
# GH1 # Angle 1: straight up (no surrounding plant)
GH1050316<-read.table("050316GH1.IRR",header=FALSE,skip=2)
PAR(GH1050316,0.5) # 492
R_FR_ratio(GH1050316,0.5) # 0.61
# GH2 Angle 2: ~90 degree (no surrounding plant)
GH2050316<-read.table("050316GH2.IRR",header=FALSE,skip=2)
PAR(GH2050316,0.5) # 388
R_FR_ratio(GH2050316,0.5) # 0.97
# GH3 straight up with surrounding plants
GH3050316<-read.table("050316GH3.IRR",header=FALSE,skip=2)
PAR(GH3050316,0.5) # 256
R_FR_ratio(GH3050316,0.5) # 0.66
# GH4 -90 degree with surrounding plants
GH4050316<-read.table("050316GH4.IRR",header=FALSE,skip=2)
PAR(GH4050316,0.5) # 315
R_FR_ratio(GH4050316,0.5) # 0.89
if(Sys.info()["user"]=="nozue") {
#homedir<-"/Volumes/Data8/NGS_related/Arabidopsis_analysis/Nozue2016_SAStranscriptome_finalfinal_newVST/Nozue2016_SAStranscriptome_scripts/SAS_muts_time_course_RNAseq_finalfinal"
# for temporary computer system (J's ex hard drive)
# homedir<-"/Volumes/Data8new/Data8/NGS_related/Arabidopsis_analysis/Nozue2016_SAStranscriptome_finalfinal_newVST/Nozue2016_SAStranscriptome_scripts/SAS_muts_time_course_RNAseq_finalfinal"
# for new computer system (Toshiba 3T ex hard drive)
homedir<-"/Volumes/data_work/data8/NGS_related/Arabidopsis_analysis/Nozue2016_SAStranscriptome_finalfinal_newVST/Nozue2016_SAStranscriptome_scripts/SAS_muts_time_course_RNAseq_finalfinal"
} # customize homedir
# download "Nozue2016_SAStranscriptome_data" at the same level of "Nozue2016_SAStranscriptome_scripts"
# Atmosphere (Cyverse)
if(Sys.info()["user"]=="kazu") {
homedir<-"/vol1/SAS_muts_time_course_RNAseq4/Nozue2016_SAStranscriptome_scripts/SAS_muts_time_course_RNAseq_finalfinal"
}
# Whitney
if(Sys.info()["nodename"]=="whitney") {
homedir<-"~/NGS/Nozue2016_SAStranscriptome_finalfinal_newVST/Nozue2016_SAStranscriptome_scripts/SAS_muts_time_course_RNAseq_finalfinal"
} # use git repository
setwd(homedir)
# reading necessary funcitons and libraries
source("function_RNAseq_time_course.R")
